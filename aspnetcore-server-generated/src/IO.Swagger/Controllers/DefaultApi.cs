/*
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using System;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Calculates the requested mathematical operation with the two given numbers</remarks>
        /// <param name="body"></param>
        /// <param name="op">Name of mathematical operation</param>
        /// <response code="200">Successful calculation</response>
        /// <response code="400">Invalid request</response>
        /// <response code="401">Access token is missing or invalid</response>
        [HttpPost]
        [Route("/CalculatorAPI/1.0.0/calculate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CalculatePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(double), description: "Successful calculation")]
        public virtual IActionResult CalculatePost([FromBody] List<double> body, [FromQuery][Required()] string op)
        {
            if (!TryGetOperation(op, out var operation))
                return new BadRequestObjectResult($"Unsupported operation \"{op}\"");
            if (body.Count < 2)
                return new BadRequestObjectResult("Request body must contain at least 2 numbers");
            var number = operation(body[0], body[1]);
            return new ObjectResult(number);
        }

        /// <summary>
        /// Defines and maps the set of supported operations
        /// </summary>
        /// <param name="name"></param>
        /// <param name="operation"></param>
        /// <returns></returns>
        public static bool TryGetOperation(string name, out Func<double, double, double> operation)
        {
            operation = name switch
            {
                "add" => (a, b) => a + b,
                "sub" => (a, b) => a - b,
                "mul" => (a, b) => a * b,
                "div" => (a, b) => a / b,
                _ => null,
            };
            return operation != null;
        }
    }
}
