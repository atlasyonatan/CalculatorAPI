/*
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Calculates the requested mathematical operation with the two given numbers</remarks>
        /// <param name="body"></param>
        /// <param name="op">Name of mathematical operation</param>
        /// <response code="200">Successful calculation</response>
        /// <response code="400">Invalid request</response>
        /// <response code="401">Access token is missing or invalid</response>
        [HttpPost]
        [Route("/atlasyonatan/CalculatorAPI/1.0.0/calculate")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CalculatePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(decimal?), description: "Successful calculation")]
        public virtual IActionResult CalculatePost([FromBody]List<decimal?> body, [FromQuery][Required()]string op)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(decimal?));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<decimal?>(exampleJson)
                        : default(decimal?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
